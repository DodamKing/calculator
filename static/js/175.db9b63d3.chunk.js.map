{"version":3,"file":"static/js/175.db9b63d3.chunk.js","mappings":"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","sources":["components/hobby/bpm.js"],"sourcesContent":["import React, { useState, useEffect, useCallback, useRef } from 'react';\r\n\r\nconst MusicBPMCalculator = () => {\r\n    const [taps, setTaps] = useState([]);\r\n    const [bpm, setBpm] = useState(0);\r\n    const [isCalculating, setIsCalculating] = useState(false);\r\n    const [timeRemaining, setTimeRemaining] = useState(5);\r\n    const [isMobile, setIsMobile] = useState(window.innerWidth <= 768);\r\n    const timerRef = useRef(null);\r\n    const startTimeRef = useRef(null);\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setIsMobile(window.innerWidth <= 768);\r\n        };\r\n        window.addEventListener('resize', handleResize);\r\n        return () => window.removeEventListener('resize', handleResize);\r\n    }, []);\r\n\r\n    const calculateBPM = useCallback(() => {\r\n        if (taps.length < 2) return 0;\r\n        const intervals = [];\r\n        for (let i = 1; i < taps.length; i++) {\r\n            intervals.push(taps[i] - taps[i-1]);\r\n        }\r\n        const averageInterval = intervals.reduce((sum, interval) => sum + interval, 0) / intervals.length;\r\n        return Math.round(60000 / averageInterval);\r\n    }, [taps]);\r\n\r\n    const startMeasurement = () => {\r\n        setIsCalculating(true);\r\n        setTimeRemaining(5);\r\n        startTimeRef.current = Date.now();\r\n        setTaps([]);\r\n        setBpm(0);\r\n    };\r\n\r\n    const handleTap = () => {\r\n        if (isCalculating) {\r\n            setTaps(prevTaps => [...prevTaps, Date.now()]);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        if (isCalculating) {\r\n            timerRef.current = setInterval(() => {\r\n                const elapsedTime = (Date.now() - startTimeRef.current) / 1000;\r\n                const remaining = Math.max(5 - Math.floor(elapsedTime), 0);\r\n                setTimeRemaining(remaining);\r\n\r\n                if (remaining === 0) {\r\n                    setIsCalculating(false);\r\n                    clearInterval(timerRef.current);\r\n                    const calculatedBPM = calculateBPM();\r\n                    setBpm(calculatedBPM);\r\n                }\r\n            }, 100);\r\n        }\r\n\r\n        return () => {\r\n            if (timerRef.current) {\r\n                clearInterval(timerRef.current);\r\n            }\r\n        };\r\n    }, [isCalculating, calculateBPM]);\r\n\r\n    const styles = {\r\n        container: {\r\n            margin: '0 auto',\r\n            padding: isMobile ? '15px' : '30px',\r\n            backgroundColor: '#f0f8ff',\r\n            borderRadius: '10px',\r\n            boxShadow: '0 4px 6px rgba(0, 0, 0, 0.1)',\r\n            fontFamily: 'Arial, sans-serif',\r\n        },\r\n        title: {\r\n            textAlign: 'center',\r\n            color: '#333333',\r\n            marginBottom: '20px',\r\n            fontSize: isMobile ? '24px' : '28px',\r\n        },\r\n        button: {\r\n            width: '100%',\r\n            padding: '15px',\r\n            fontSize: isMobile ? '16px' : '18px',\r\n            color: 'white',\r\n            border: 'none',\r\n            borderRadius: '5px',\r\n            cursor: 'pointer',\r\n            transition: 'background-color 0.3s',\r\n            marginBottom: '10px',\r\n        },\r\n        startButton: {\r\n            backgroundColor: '#2196F3',\r\n        },\r\n        tapButton: {\r\n            backgroundColor: isCalculating ? '#4CAF50' : '#cccccc',\r\n        },\r\n        resultContainer: {\r\n            marginTop: '20px',\r\n            textAlign: 'center',\r\n        },\r\n        bpmDisplay: {\r\n            fontSize: isMobile ? '36px' : '48px',\r\n            fontWeight: 'bold',\r\n            color: '#2c5282',\r\n        },\r\n        timeRemaining: {\r\n            fontSize: isMobile ? '16px' : '18px',\r\n            color: '#666666',\r\n            marginTop: '10px',\r\n        },\r\n        instructions: {\r\n            marginTop: '20px',\r\n            padding: '15px',\r\n            backgroundColor: '#e8f0fe',\r\n            borderRadius: '5px',\r\n            fontSize: isMobile ? '14px' : '16px',\r\n        },\r\n    };\r\n\r\n    return (\r\n        <div style={styles.container}>\r\n            <h2 style={styles.title}>음악 BPM 계산기</h2>\r\n            <button \r\n                style={{...styles.button, ...styles.startButton}}\r\n                onClick={startMeasurement}\r\n                disabled={isCalculating}\r\n            >\r\n                BPM 측정 시작\r\n            </button>\r\n            <button \r\n                style={{...styles.button, ...styles.tapButton}}\r\n                onClick={handleTap}\r\n                disabled={!isCalculating}\r\n            >\r\n                비트에 맞춰 탭하세요!\r\n            </button>\r\n            <div style={styles.resultContainer}>\r\n                <div style={styles.bpmDisplay}>{bpm} BPM</div>\r\n                {isCalculating && (\r\n                    <div style={styles.timeRemaining}>남은 시간: {timeRemaining}초</div>\r\n                )}\r\n            </div>\r\n            <div style={styles.instructions}>\r\n                <h4>사용 방법:</h4>\r\n                <ol>\r\n                    <li>'BPM 측정 시작' 버튼을 클릭하여 측정을 시작합니다.</li>\r\n                    <li>음악이 재생되면 '비트에 맞춰 탭하세요!' 버튼을 5초 동안 탭합니다.</li>\r\n                    <li>5초 후 자동으로 BPM이 계산되고 표시됩니다.</li>\r\n                    <li>다시 측정하려면 'BPM 측정 시작' 버튼을 클릭하세요.</li>\r\n                </ol>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MusicBPMCalculator;"],"names":["MusicBPMCalculator","taps","setTaps","useState","bpm","setBpm","isCalculating","setIsCalculating","timeRemaining","setTimeRemaining","isMobile","setIsMobile","window","innerWidth","timerRef","useRef","startTimeRef","useEffect","handleResize","addEventListener","removeEventListener","calculateBPM","useCallback","length","intervals","i","push","averageInterval","reduce","sum","interval","Math","round","current","setInterval","elapsedTime","Date","now","remaining","max","floor","clearInterval","calculatedBPM","styles","container","margin","padding","backgroundColor","borderRadius","boxShadow","fontFamily","title","textAlign","color","marginBottom","fontSize","button","width","border","cursor","transition","startButton","tapButton","resultContainer","marginTop","bpmDisplay","fontWeight","instructions","_jsxs","style","children","_jsx","onClick","startMeasurement","disabled","handleTap","prevTaps"],"sourceRoot":""}